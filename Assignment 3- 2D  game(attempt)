import pygame
from pygame.locals import (K_LEFT, K_RIGHT, K_UP, K_DOWN, K_SPACE, K_ESCAPE, KEYDOWN, QUIT)
import random

pygame.init()

Screen_width = 800
Screen_height = 600

screen = pygame.display.set_mode((Screen_width, Screen_height))
clock = pygame.time.Clock()

# Define the custom event for adding enemies
ADDENEMY = pygame.USEREVENT + 1
pygame.time.set_timer(ADDENEMY, 1500)  # Adds a new enemy every 1.5 seconds (slowed down spawn rate)

# Colors
WHITE = (255, 255, 255)
BLUE = (0, 128, 255)
RED = (255, 0, 0)
BLACK = (0, 0, 0)

# Fonts
font = pygame.font.Font(None, 36)

# Player class
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super(Player, self).__init__()
        self.surf = pygame.Surface((50, 50))
        self.surf.fill(BLUE) 
        self.rect = self.surf.get_rect(center=(100, Screen_height // 2))  # Start near the left edge
        self.last_direction = 'right'  # Track the last horizontal direction
        self.shoot_delay = 300  # Delay in milliseconds between shots
        self.last_shot = pygame.time.get_ticks()  # Time of the last shot

    def update(self, pressed_keys):
        if pressed_keys[K_UP]:
            self.rect.move_ip(0, -5)
        if pressed_keys[K_DOWN]:
            self.rect.move_ip(0, 5)
        if pressed_keys[K_LEFT]:
            self.rect.move_ip(-5, 0)
            self.last_direction = 'left'
        if pressed_keys[K_RIGHT]:
            self.rect.move_ip(5, 0)
            self.last_direction = 'right'

        # Keep the player within screen bounds
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > Screen_width:
            self.rect.right = Screen_width
        if self.rect.top <= 0:
            self.rect.top = 0
        if self.rect.bottom >= Screen_height:
            self.rect.bottom = Screen_height

    def shoot(self):
        # Check if enough time has passed since the last shot
        now = pygame.time.get_ticks()
        if now - self.last_shot >= self.shoot_delay:
            self.last_shot = now  # Update the time of the last shot
            return Bullet(self.rect.centerx, self.rect.centery, self.last_direction)
        return None

# Bullet class
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y, direction):
        super(Bullet, self).__init__()
        self.surf = pygame.Surface((10, 5))
        self.surf.fill(WHITE)  # White bullet
        self.rect = self.surf.get_rect(center=(x, y))
        self.direction = direction  # Left or right direction only

    def update(self):
        # Move bullet based on direction (left or right)
        if self.direction == 'right':
            self.rect.move_ip(10, 0)
        elif self.direction == 'left':
            self.rect.move_ip(-10, 0)

        # Remove bullet when it goes off-screen
        if self.rect.left > Screen_width or self.rect.right < 0:
            self.kill()

# Enemy class
class Enemy(pygame.sprite.Sprite):
    def __init__(self):
        super(Enemy, self).__init__()
        self.surf = pygame.Surface((50, 50))
        self.surf.fill(RED)  # Red enemy for visibility
        self.rect = self.surf.get_rect(
            center=(random.randint(Screen_width + 20, Screen_width + 100), random.randint(0, Screen_height))
        )
        self.speed = random.randint(1, 3)  # Slower speed
        self.health = 4  # Default health for regular enemies

    def update(self, player):
        # Move left and follow the player slightly on the Y-axis
        self.rect.move_ip(-self.speed, 0)

        # Adjust vertical position to follow the player slightly
        if self.rect.centery < player.rect.centery:
            self.rect.move_ip(0, 1)  # Move down
        elif self.rect.centery > player.rect.centery:
            self.rect.move_ip(0, -1)  # Move up

        # Remove enemy if it moves off the screen
        if self.rect.right < 0:
            self.kill()

# Boss class
class Boss(Enemy):
    def __init__(self):
        super(Boss, self).__init__()
        self.surf = pygame.Surface((100, 100))  # Larger size for the boss
        self.surf.fill((128, 0, 128))  # Purple boss for visibility
        self.rect = self.surf.get_rect(center=(Screen_width + 100, Screen_height // 2))
        self.speed = 1  # Slower speed for the boss
        self.health = 40  # Boss health is 10 times regular enemies

    def update(self, player):
        # Follow the player horizontally and vertically
        if self.rect.centerx > player.rect.centerx:
            self.rect.move_ip(-self.speed, 0)
        if self.rect.centerx < player.rect.centerx:
            self.rect.move_ip(self.speed, 0)

        if self.rect.centery > player.rect.centery:
            self.rect.move_ip(0, -self.speed)
        if self.rect.centery < player.rect.centery:
            self.rect.move_ip(0, self.speed)

        # Keep the boss within the screen boundaries
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > Screen_width:
            self.rect.right = Screen_width
        if self.rect.top < 0:
            self.rect.top = 0
        if self.rect.bottom > Screen_height:
            self.rect.bottom = Screen_height


# Create the player
player = Player()

# Create groups for bullets, enemies, and all sprites
bullets = pygame.sprite.Group()
enemies = pygame.sprite.Group()
all_sprites = pygame.sprite.Group()
all_sprites.add(player)

# Scoring system
score = 0

# Game state flags
game_started = False
boss_spawned = False
boss_defeated = False

def start_screen():
    screen.fill(BLACK)
    title_text = font.render("Press Any Key to Start", True, WHITE)
    screen.blit(title_text, (Screen_width // 2 - title_text.get_width() // 2, Screen_height // 2))
    pygame.display.flip()

def end_level():
    screen.fill(BLACK)
    end_text = font.render("Level Complete!", True, WHITE)
    screen.blit(end_text, (Screen_width // 2 - end_text.get_width() // 2, Screen_height // 2))
    pygame.display.flip()
    pygame.time.wait(3000)

# Main game loop
running = True
while running:
    if not game_started:
        start_screen()
        for event in pygame.event.get():
            if event.type == KEYDOWN:
                game_started = True
            elif event.type == QUIT:
                running = False
        continue  # Skip the rest of the loop until the game starts

    for event in pygame.event.get():
        if event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                running = False

        elif event.type == QUIT:
            running = False

        elif event.type == ADDENEMY and not boss_spawned:
            new_enemy = Enemy()
            enemies.add(new_enemy)
            all_sprites.add(new_enemy)

    pressed_keys = pygame.key.get_pressed()
    player.update(pressed_keys)  # Update player position

    # Continuous shooting when holding spacebar
    if pressed_keys[K_SPACE]:
        bullet = player.shoot()
        if bullet:
            bullets.add(bullet)
            all_sprites.add(bullet)

    bullets.update()  # Update bullets position
    enemies.update(player)  # Update enemies position based on player's position

    # Check for collisions between bullets and enemies
    for bullet in bullets:
        hit_enemies = pygame.sprite.spritecollide(bullet, enemies, False)
        for enemy in hit_enemies:
            bullet.kill()  # Remove bullet if it hits an enemy
            enemy.health -= 1
            if enemy.health <= 0:
                enemy.kill()
                score += 1  # Increase score when an enemy is killed

    # Spawn boss after 10 enemies are killed
    if score >= 10 and not boss_spawned:
        boss = Boss()
        all_sprites.add(boss)
        boss_spawned = True

    # Handle boss logic
    if boss_spawned and boss.alive():
        boss.update(player)

        # Check collision between bullets and boss
        hit_boss = pygame.sprite.spritecollide(boss, bullets, True)
        for bullet in hit_boss:
            boss.health -= 1
            if boss.health <= 0:
                boss.kill()
                boss_defeated = True

    if boss_defeated:
        end_level()
        running = False  # End the game after level completion

    screen.fill(BLACK)  # Clear the screen

    # Draw all sprites
    for entity in all_sprites:
        screen.blit(entity.surf, entity.rect)

    # Display score
    score_text = font.render(f"Score: {score}", True, WHITE)
    screen.blit(score_text, (10, 10))

    pygame.display.flip()  # Update the screen

    clock.tick(60)  # Limit the frame rate to 60 FPS

pygame.quit()
